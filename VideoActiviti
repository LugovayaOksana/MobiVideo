import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import androidx.core.content.FileProvider.getUriForFile
import androidx.lifecycle.LifecycleOwner
import com.example.mobistrim.R
import com.example.mobistrim.ui.base.BaseActivity
import kotlinx.android.synthetic.main.activity_video.*
import retrofit2.http.Url
import java.io.File
import java.util.*

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.net.Uri

import java.util.concurrent.Executors
import androidx.camera.core.*
//import androidx.camera.lifecycle.ProcessCameraProvider
import kotlinx.android.synthetic.main.activity_main.*
import java.nio.ByteBuffer
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.ExecutorService
typealias LumaListener = (luma: Double) -> Unit


private const val REQUEST_CODE_PERMISSIONS = 10
private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA, Manifest.permission.RECORD_AUDIO)
private val tag = VideoActivity::class.java.simpleName


@SuppressLint("RestrictedApi, ClickableViewAccessibility")
class VideoActivity() : BaseActivity(R.layout.activity_video), LifecycleOwner {

    private lateinit var viewFinder: TextureView
    private lateinit var btnStrim: ImageButton
    private lateinit var videoCapture: VideoCapture

    private lateinit var cameraM: CameraManager
    private lateinit var flashBtn: ImageButton

    private lateinit var outputDirectory: File

    private lateinit var videoUrl: Url
    val REQUEST_VIDEO_CAPTURE = 1

//    val cameraProcessFuture = ProcessCameraProvider.getInstance(context)

    var isFlash = false
    var isRecording = false

    constructor(parcel: Parcel) : this() {
        isFlash = parcel.readByte() != 0.toByte()
    }

    @SuppressLint("ServiceCast")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_video)

        viewFinder = findViewById(R.id.view_finder)
        btnStrim = findViewById(R.id.btn_strim)

        // Request camera permissions
        if (allPermissionsGranted()) {
            viewFinder.post { startCamera() }
        } else {
            ActivityCompat.requestPermissions(
                    this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS)
        }

        outputDirectory = getOutputDirectory()

//        val file = File(
//            externalMediaDirs.first(),
//            "${System.currentTimeMillis()}.mp4"
//        )

        val storageDir = getExternalFilesDir(Environment.DIRECTORY_MOVIES)

        // Create time-stamped output file to hold the image
        val file = File(
                storageDir,
                "${System.currentTimeMillis()}.mp4"
        )



        btnStrim.setOnClickListener {
            if(!isRecording) {
                btnStrim.setBackgroundResource(R.drawable.ic_stop_recording)
                isRecording = true
                videoCapture.startRecording(file, object : VideoCapture.OnVideoSavedListener {
                    override fun onVideoSaved(file: File?) {
                        Log.i(tag, "Video File : $file")

//                        recordVideo()

                    }
                    override fun onError(
                            useCaseError: VideoCapture.UseCaseError?,
                            message: String?,
                            cause: Throwable?
                    ) {
                        Log.i(tag, "Video Error: $message")
                    }
                })
                textMassge("strim on", this)
            } else {
                isRecording = false
                videoCapture.stopRecording()
                Log.i(tag, "Video File stopped")

                btnStrim.setBackgroundResource(R.drawable.ic_start_recording)
                textMassge("strim Off", this)
            }
        }

//        flashBtn.setOnClickListener{ flashLightOnOff(it) }





//        val isFlashAvailable = applicationContext.packageManager
//            .hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)
//
//        if (!isFlashAvailable) {
//            showNoFlashError()
//        }

//        mCameraManager = getSystemService(CAMERA_SERVICE) as CameraManager
//        try {
//            mCameraId = mCameraManager!!.getCameraIdList().get(0)
//        } catch (e: CameraAccessException) {
//            e.printStackTrace()
//        }
//
//        toggleButton = findViewById<View>(R.id.onOffFlashlight)
//        toggleButton.setOnCheckedChangeListener(CompoundButton.OnCheckedChangeListener { buttonView, isChecked ->
//            switchFlashLight(
//                isChecked
//            )
//        })
    }

    //    @RequiresApi(Build.VERSION_CODES.M)
    override fun onRequestPermissionsResult(
            requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                viewFinder.post { startCamera() }
            } else {
                Toast.makeText(this,
                        "Permissions not granted by the user.",
                        Toast.LENGTH_SHORT).show()
                finish()
            }
        }
    }

    private fun allPermissionsGranted(): Boolean {
        for (permission in REQUIRED_PERMISSIONS) {
            if (ContextCompat.checkSelfPermission(
                            this, permission) != PackageManager.PERMISSION_GRANTED) {
                return false
            }
        }
        return true
    }

    private fun startCamera() {
        // Create configuration object for the viewfinder use case
        val previewConfig = PreviewConfig.Builder().build()
        // Build the viewfinder use case
        val preview = Preview(previewConfig)

        val videoCaptureConfig = VideoCaptureConfig.Builder().apply {
            setTargetRotation(viewFinder.display.rotation)
        }.build()
        videoCapture = VideoCapture(videoCaptureConfig)

        preview.setOnPreviewOutputUpdateListener {
            viewFinder.setSurfaceTexture(it.surfaceTexture)
        }

        // Bind use cases to lifecycle
        CameraX.bindToLifecycle(this, preview, videoCapture)
    }

    // creates a folder inside internal storage
    private fun getOutputDirectory(): File {
        val mediaDir = externalMediaDirs.firstOrNull()?.let {
            File(it, resources.getString(R.string.app_name)).apply { mkdirs() }
        }
        return if (mediaDir != null && mediaDir.exists())
            mediaDir else filesDir
    }


//    private fun recordVideo() {
//        val videoFile = createVideoFile()
//        if(videoFile != null) {
//            videoUrl = getUriForFile(
//                    this,
//                    "com.video.record.fileprovider",
//                    videoFile
//            )
//
//
//            val intent = Intent(MediaStore.ACTION_VIDEO_CAPTURE)
//            intent.putExtra(MediaStore.EXTRA_OUTPUT, videoUrl)
//            startActivityForResult(intent,REQUEST_VIDEO_CAPTURE)
//
//        }
//    }

//    @SuppressLint("MissingSuperCall")
//    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
//        super.onActivityResult(requestCode, resultCode, data)
//
//        if(requestCode == REQUEST_VIDEO_CAPTURE && resultCode ==Activity.RESULT_OK) {
//            view_finder.setVideoURL(videoUrl)
//            view_finder.start()
//        }
//    }

    private fun createVideoFile(): File {
        val fileName = "MyVideo"
        val storageDir = getExternalFilesDir(Environment.DIRECTORY_MOVIES)
        return File.createTempFile(
                fileName,
                ".mp4",
                storageDir
        )
    }

    private fun flashLightOnOff(v: View?) {
//        val camera = cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, preview, imageAnalyzer)
//
//        camera.cameraInfo.hasFlashUnit()

//        val cameraIdList: Array<String>
//
//        try {
//            cameraIdList = cameraM.getCameraIdList()
//        } catch (e: CameraAccessException) {
//            Log.e("MASSAGE_E", "couldn't get camera list", e)
//            return
//        }
//        Log.d("MASSAGE_E", "acquired cameraIdList: length: " + cameraIdList.size)
//        Log.d("MASSAGE_E", "cameraIdList[0]: " + cameraIdList[0])
//        Log.d("MASSAGE_E", "cameraIdList[1]: " + cameraIdList[1])
//
//        if (cameraIdList.size === 0) {
//            Log.w("TAG", "couldn't detect a camera")
//            return
//        }


        if (!isFlash) {

//            val cameraList = cameraM.cameraIdList[0]
            val cameraList = cameraM!!.cameraIdList[0]
            cameraM.setTorchMode(cameraList, true)


            isFlash = true
            flashBtn.setBackgroundResource(R.drawable.ic_flash_no)

//            val cameraControl = cameraM.cameraControl
//            cameraControl.enableTorch(true)
//            isFlash = true
            textMassge("Flash Light is On", this)
        } else {
            val cameraList = cameraM.cameraIdList[0]
            cameraM.setTorchMode(cameraList, false)
            isFlash = false

            flashBtn.setBackgroundResource(R.drawable.ic_flash)
//            isFlash = false
            textMassge("Flash Light is Off", this)
        }
    }

    private fun textMassge(s: String, c: Context) {
        Toast.makeText(c, s, Toast.LENGTH_SHORT).show()
    }


//    private var mCameraManager: CameraManager? = null
//    private var mCameraId: String? = null
//    private var toggleButton: ToggleButton? = null
//
//    private  fun showNoFlashError() {
//        val alert: AlertDialog = Builder(this)
//            .create()
//        alert.setTitle("Oops!")
//        alert.setMessage("Flash not available in this device...")
//        alert.setButton(DialogInterface.BUTTON_POSITIVE, "OK",
//            DialogInterface.OnClickListener { dialog, which -> finish() })
//        alert.show()
//    }
//
//    private fun switchFlashLight(status: Boolean) {
//        try {
//            mCameraId?.let { mCameraManager?.setTorchMode(it, status) }
//        } catch (e: CameraAccessException) {
//            e.printStackTrace()
//        }
//    }
//    override fun writeToParcel(parcel: Parcel, flags: Int) {
//        parcel.writeByte(if (isFlash) 1 else 0)
//    }
//
//    override fun describeContents(): Int {
//        return 0
//    }

//    companion object CREATOR : Parcelable.Creator<VideoActivity> {
//        override fun createFromParcel(parcel: Parcel): VideoActivity {
//            return VideoActivity(parcel)
//        }
//
//        override fun newArray(size: Int): Array<VideoActivity?> {
//            return arrayOfNulls(size)
//        }
//    }


}


